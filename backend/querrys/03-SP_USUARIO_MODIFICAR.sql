USE admin_users;

-- LISTAR USUARIOS POR CORREO
DROP PROCEDURE IF EXISTS SP_USUARIO_LISTAR_POR_CORREO;
CREATE PROCEDURE SP_USUARIO_LISTAR_POR_CORREO(
    IN p_email VARCHAR(255)
)
BEGIN
    SELECT ID, NAME, EMAIL FROM USER WHERE EMAIL = p_email;
END;

CALL SP_USUARIO_LISTAR_POR_CORREO('J@J.COM');

-- MODIFICAR USUARIO
DROP PROCEDURE IF EXISTS SP_USUARIO_MODIFICAR;
CREATE PROCEDURE SP_USUARIO_MODIFICAR(
    IN p_nombre VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255)
)
BEGIN
    UPDATE USER 
    SET NAME = p_nombre
        , PASSWORD = PASSWORD(p_password) 
    WHERE EMAIL = p_email;
END;

-- CREA SP PARA ACTUALIZAR IMAGEN DE USUARIO
DROP PROCEDURE IF EXISTS SP_USUARIO_ACTUALIZAR_IMAGEN;
CREATE PROCEDURE SP_USUARIO_ACTUALIZAR_IMAGEN(
    IN p_email VARCHAR(255),
    IN p_imagen VARCHAR(255)
)
BEGIN
    UPDATE USER 
    SET IMAGE = p_imagen 
    WHERE EMAIL = p_email;
END;

-- CREA LA TAB LA ROLE
DROP TABLE IF EXISTS ROLE;
CREATE TABLE ROLE(
    ID INT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(255) NOT NULL,
    PRIMARY KEY (ID)
);

-- LLENA LA TABLA ROL
INSERT INTO ROLE (NAME) VALUES ('ADMIN');
INSERT INTO ROLE (NAME) VALUES ('USER');
INSERT INTO ROLE (NAME) VALUES ('MODERATOR');

-- MODIFICA LA TABLA USER Y AGREGA LA REALACIÃ“N CON ROLE
ALTER TABLE USER ADD COLUMN ROLE_ID INT NOT NULL DEFAULT 2;
ALTER TABLE USER ADD CONSTRAINT FK_USER_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ID);

-- ACTUALIZA LA TABLA USER 
UPDATE USER SET ROLE_ID = 2 WHERE ROLE_ID IS NULL;

-- CREA SP PARA ELIMINAR USUARIO
DROP PROCEDURE IF EXISTS SP_USUARIO_ELIMINAR;
CREATE PROCEDURE SP_USUARIO_ELIMINAR(
    IN p_email VARCHAR(255)
)
BEGIN
    DELETE FROM USER 
    WHERE EMAIL = p_email;
END;
